import mysql.connector
from mysql.connector import Error

# Conexión a la base de datos
def crear_conexion():
    try:
        conexion = mysql.connector.connect(
            host='localhost',
            database='chefhub',
            user='root'
        )
        if conexion.is_connected():
            return conexion
    except Error as e:
        print("Error al conectar a la base de datos", e)
        return None

# Mostrar recetas existentes
def mostrar_recetas(conexion):
    cursor = conexion.cursor(dictionary=True)
    cursor.execute("""
        SELECT recetas.receta_id, recetas.nombre_postre, recetas.tiempo_preparacion, 
        IFNULL(AVG(valoraciones.valor), 'Sin valoración') as valoracion_promedio
        FROM recetas
        LEFT JOIN valoraciones ON recetas.receta_id = valoraciones.receta_id
        GROUP BY recetas.receta_id
        ORDER BY recetas.receta_id ASC;
    """)
    recetas = cursor.fetchall()
    print("Recetas Disponibles:")
    for receta in recetas:
        print(f"ID: {receta['receta_id']} - {receta['nombre_postre']} (Tiempo: {receta['tiempo_preparacion']} min) - Valoración: {receta['valoracion_promedio']}")

# Visualizar receta
def visualizar_receta(conexion, receta_id):
    cursor = conexion.cursor(dictionary=True)
    cursor.execute("""
        SELECT recetas.*, IFNULL(AVG(valoraciones.valor), 'Sin valoración') as valoracion_promedio
        FROM recetas
        LEFT JOIN valoraciones ON recetas.receta_id = valoraciones.receta_id
        WHERE recetas.receta_id = %s
        GROUP BY recetas.receta_id
    """, (receta_id,))
    receta = cursor.fetchone()
    
    if receta:
        print(f"\n{receta['nombre_postre']} - {receta['tipo_postre']}")
        print(f"Tiempo de preparación: {receta['tiempo_preparacion']} minutos")
        print(f"Descripción: {receta['descripcion']}")
        print(f"Valoración promedio: {receta['valoracion_promedio']}")
        return True
    else:
        print("Receta no encontrada.")
        return False

# Dejar una valoración
def dejar_valoracion(conexion, receta_id):
    while True:
        opcion = input("¿Desea dejar una valoración? (si/no): ").strip().lower()
        if opcion == 'si':
            valor = int(input("Ingrese la valoración (1-5): ").strip())
            cursor = conexion.cursor()
            cursor.execute("INSERT INTO valoraciones (valor, usuario_id, receta_id) VALUES (%s, %s, %s)", (valor, 1, receta_id))
            conexion.commit()
            print("Valoración registrada exitosamente. ¡Gracias por tu aporte!")
            break
        elif opcion == 'no':
            print("Gracias por tu tiempo. Regresando al menú principal...")
            break
        else:
            print("Opción no válida. Por favor, responda con 'si' o 'no'.")

# Buscar receta
def buscar_receta(conexion):
    busqueda = input("Ingrese el nombre del postre o tipo de postre a buscar: ").strip().lower()
    cursor = conexion.cursor(dictionary=True)
    cursor.execute("""
        SELECT receta_id, nombre_postre, tipo_postre
        FROM recetas
        WHERE LOWER(nombre_postre) LIKE %s OR LOWER(tipo_postre) LIKE %s
    """, (f'%{busqueda}%', f'%{busqueda}%'))
    resultados = cursor.fetchall()
    
    if resultados:
        print("Coincidencias encontradas:")
        for resultado in resultados:
            print(f"ID: {resultado['receta_id']} - {resultado['nombre_postre']} (Tipo: {resultado['tipo_postre']})")
        
        receta_id = int(input("Ingrese el ID de la receta que desea visualizar: ").strip())
        if visualizar_receta(conexion, receta_id):
            dejar_valoracion(conexion, receta_id)
    else:
        print("No se encontraron coincidencias.")

# Crear receta
def crear_receta(conexion):
    nombre_postre = input("Nombre del postre: ").strip()
    tipo_postre = input("Tipo de postre(postre caliente/postre frío): ").strip()
    descripcion = input("Descripción: ").strip()
    tiempo_preparacion = int(input("Tiempo de preparación (en minutos): ").strip())
    
    cursor = conexion.cursor()
    cursor.execute("""
        INSERT INTO recetas (nombre_postre, descripcion, tiempo_preparacion, tipo_postre, usuario_id)
        VALUES (%s, %s, %s, %s, %s, %s)
    """, (nombre_postre, descripcion, tiempo_preparacion, tipo_postre, 1))
    conexion.commit()
    print("Receta creada exitosamente.")

# Menú principal
def menu_principal():
    conexion = crear_conexion()
    if not conexion:
        return
    
    while True:
        print("\n--- Menú Principal ---")
        print("1. Mostrar recetas existentes")
        print("2. Buscar receta")
        print("3. Crear receta")
        print("4. Salir")
        
        opcion = input("Seleccione una opción: ").strip().lower()
        
        if opcion == '1':
            mostrar_recetas(conexion)
        elif opcion == '2':
            buscar_receta(conexion)
        elif opcion == '3':
            crear_receta(conexion)
        elif opcion == '4':
            print("Gracias por usar ChefHub. ¡Hasta pronto!")
            break
        else:
            print("Opción no válida. Intente nuevamente.")

    conexion.close()

# Ejecución del programa
if __name__ == "__main__":
    menu_principal()
