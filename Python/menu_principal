import mysql.connector
from mysql.connector import Error
from registro_Usuarios import App

# Conexión a la base de datos
def crear_conexion():
    try:
        conexion = mysql.connector.connect(
            host='localhost',
            database='chefhub',
            user='root'
        )
        if conexion.is_connected():
            return conexion
    except Error as e:
        print("Error al conectar a la base de datos", e)
        return None

# Valoración de la receta en estrellas
def estrellas(valoracion):
    try:
        valoracion = int((valoracion))
        if valoracion == 0:
            return 'Sin valoración'
        color_amarillo = '\033[93m'  # Código ANSI para color amarillo
        reset = '\033[0m'
        estrellas_llenas = f'{color_amarillo}★' * valoracion  # Estrellas llenas en color amarillo
        estrellas_vacias = '☆' * (5 - valoracion)  # Estrellas vacías
        return estrellas_llenas + estrellas_vacias + reset
    except ValueError:
        return 'Sin valoración'

# Mostrar recetas existentes
def mostrar_recetas(conexion):
    cursor = conexion.cursor(dictionary=True)
    cursor.execute("""
        SELECT recetas.receta_id, recetas.nombre_postre, recetas.tiempo_preparacion, 
        IFNULL(AVG(valoraciones.valor), 0) as valoracion_promedio
        FROM recetas
        LEFT JOIN valoraciones ON recetas.receta_id = valoraciones.receta_id
        GROUP BY recetas.receta_id
        ORDER BY recetas.receta_id ASC;
    """)
    recetas = cursor.fetchall()
    print("Recetas Disponibles:")
    for receta in recetas:
        valoracion_promedio = receta['valoracion_promedio']
        valoracion_estrellas = estrellas(valoracion_promedio)
        print(f"ID: {receta['receta_id']} - {receta['nombre_postre']} (Tiempo: {receta['tiempo_preparacion']} min) - Valoración: {valoracion_estrellas}")

# Visualizar receta
def visualizar_receta(conexion, receta_id):
    cursor = conexion.cursor(dictionary=True)
    cursor.execute("""
        SELECT recetas.*, IFNULL(AVG(valoraciones.valor), 0) as valoracion_promedio
        FROM recetas
        LEFT JOIN valoraciones ON recetas.receta_id = valoraciones.receta_id
        WHERE recetas.receta_id = %s
        GROUP BY recetas.receta_id
    """, (receta_id,))
    receta = cursor.fetchone()

    if receta:
        valoracion_promedio = receta['valoracion_promedio']
        valoracion_estrellas = estrellas(valoracion_promedio)
        print(f"\n{receta['nombre_postre']} - {receta['tipo_postre']}")
        print(f"Tiempo de preparación: {receta['tiempo_preparacion']} minutos")
        print(f"Descripción: {receta['descripcion']}")
        print(f"Valoración promedio: {valoracion_estrellas}")
        return True
    else:
        print("\033[1m\033[31mReceta no encontrada.\033[0m")
        return False

# Dejar una valoración
def dejar_valoracion(conexion, receta_id):
    while True:
        opcion = input("¿Desea dejar una valoración? (si/no): ").strip().lower()
        if opcion == 'si':
            while True:
                try:
                    valor = int(input("\nIngrese la valoración (1-5): ").strip())
                    if 1 <= valor <= 5:
                        break
                    else:
                        print("La valoración debe estar entre 1 y 5.")
                except ValueError:
                    print("Por favor, ingrese un número entero válido.")

            cursor = conexion.cursor()
            cursor.execute("INSERT INTO valoraciones (valor, usuario_id, receta_id) VALUES (%s, %s, %s)", (valor, 1, receta_id))
            conexion.commit()

            # Mostrar la valoración en estrellas
            valoracion_estrellas = estrellas(valor)
            print(f"\033[1m\033[34mValoración registrada exitosamente: {valoracion_estrellas}. ¡Gracias por tu aporte!\033[0m")
            break
        elif opcion == 'no':
            print("Gracias por tu tiempo. Regresando al menú principal...")
            break
        else:
            print("Opción no válida. Por favor, responda con 'si' o 'no'.")

# Buscar receta
def buscar_receta(conexion):
    busqueda = input("Ingrese el nombre del postre o tipo de postre a buscar: ").strip().lower()
    cursor = conexion.cursor(dictionary=True)
    cursor.execute("""
        SELECT receta_id, nombre_postre, tipo_postre
        FROM recetas
        WHERE LOWER(nombre_postre) LIKE %s OR LOWER(tipo_postre) LIKE %s
    """, (f'%{busqueda}%', f'%{busqueda}%'))
    resultados = cursor.fetchall()

    if resultados:
        print("Coincidencias encontradas:")
        for resultado in resultados:
            print(f"ID: {resultado['receta_id']} - {resultado['nombre_postre']} (Tipo: {resultado['tipo_postre']})")

        receta_id = int(input("Ingrese el ID de la receta que desea visualizar: ").strip())
        if visualizar_receta(conexion, receta_id):
            dejar_valoracion(conexion, receta_id)
    else:
        print("\033[1m\033[31mNo se encontraron coincidencias.\033[0m")

# Crear receta
def crear_receta(conexion):
    nombre_postre = input("\033[1m\033[37m✦ Nombre del postre:\033[0m ").strip()
    tipo_postre = input("\033[1m\033[37m✦ Tipo de postre (postre caliente/postre frío):\033[0m ").strip()
    descripcion = input("\033[1m\033[37m✦ Descripción:\033[0m ").strip()
    tiempo_preparacion = int(input("\033[1m\033[37m✦ Tiempo de preparación (en minutos):\033[0m ").strip())

    cursor = conexion.cursor()

    # Cambiar 0 por un usuario_id válido
    cursor.execute("""
        INSERT INTO recetas (nombre_postre, descripcion, tiempo_preparacion, tipo_postre, usuario_id)
        VALUES (%s, %s, %s, %s, %s)
    """, (nombre_postre, descripcion, tiempo_preparacion, tipo_postre, 1))  # Asignar usuario_id válido
    conexion.commit()
    print("\033[1m\033[32mReceta creada exitosamente.\033[0m")


# Registro / Inicio de sesión
def registro_o_inicio_sesion():
    app = App()
    app.conectar()

    while True:
        print('\t\t\t\t\t\t\t\t\t\033[35;1m' + 'ChefHub' + '\033[0m')
        print('\033[32;1m' + '+' + '-' * 78 + '+\n' + '|' + '--- Registro e Inicio de Sesión ---'.center(
            78) + '|\n' + '+' + '-' * 78 + '\033[0m')
        print('\033[1;3m1. Registrar nuevo usuario\033[0m')
        print('\033[1;3m2. Iniciar sesión\033[0m')
        print('\033[1;3m3. Salir\033[0m')

        opcion = input("\nSeleccione una opción: ").strip()

        if opcion == '1':
            nombre = app.registrarUsuarios()
            if nombre:
                print(f'\033[32;1m' + f'¡Bienvenido, {nombre}!'+ '\033[0m')
                return app
        elif opcion == '2':
            nombre = app.iniciarSesion()
            if nombre:
                print(f'\033[32;1m' + f'¡Bienvenido, {nombre}!'+ '\033[0m')
                return app
        elif opcion == '3':
            print("Hasta luego.")
            app.cerrarConexion()
            exit()
        else:
            print('\033[31;1mOpción no válida. Intente nuevamente.\033[0m')

# Menú principal
def menu_principal():
    app = registro_o_inicio_sesion()
    conexion = crear_conexion()
    if not conexion:
        return

    while True:
        print('\033[35;1m' + '+' + '-' * 78 + '+\n' + '|' + 'Menú Principal'.center(
            78) + '|\n' + '+' + '-' * 78 + '\033[0m')
        print("\033[1m\033[3m\033[37m1. Mostrar recetas existentes\033[0m")
        print("\033[1m\033[3m\033[37m2. Buscar receta\033[0m")
        print("\033[1m\033[3m\033[37m3. Crear receta\033[0m")
        print("\033[1m\033[3m\033[37m4. Salir\033[0m")

        opcion = input("\nSeleccione una opción: ").strip().lower()

        if opcion == '1':
            mostrar_recetas(conexion)
        elif opcion == '2':
            buscar_receta(conexion)
        elif opcion == '3':
            crear_receta(conexion)
        elif opcion == '4':
            print("\033[1m\033[96mGracias por usar ChefHub. ¡Hasta pronto!\033[0m")
            break
        else:
            print('\033[31;1mOpción no válida. Intente nuevamente.\033[0m')

    conexion.close()
    app.cerrarConexion()

# Ejecución del programa
if __name__ == "__main__":
    menu_principal()
